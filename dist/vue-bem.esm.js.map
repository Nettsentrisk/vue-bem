{"version":3,"file":"vue-bem.esm.js","sources":["src/modules/shared.js","src/modules/utils.js","src/modules/directive.js","src/modules/plugin.js","src/modules/bem.js","src/modules/mixin.js"],"sourcesContent":["export const TYPE_STRING = 'string';\nexport const DEFAULT_OPTIONS = {\n  namespace: '',\n  blockSource: 'name',\n  method: '$bem',\n  hyphenate: {\n    blockAndElement: false,\n    modifier: true,\n  },\n  delimiters: {\n    element: '__',\n    modifier: '--',\n    value: '-',\n  }\n};\n\nexport const HYPHENATE_CACHE = {};\n","import { HYPHENATE_CACHE, TYPE_STRING } from './shared';\n\n/**\n * Convert the given string to kebab-case.\n *\n * @param {String} str - The to be converted string.\n *\n * @returns {String}\n */\nexport function kebabCase(str) {\n  return HYPHENATE_CACHE[str] // eslint-disable-line no-return-assign\n    || (HYPHENATE_CACHE[str] = str.replace(/\\B([A-Z])/g, '-$1').toLowerCase());\n}\n\n/**\n * Create an Array of modifier classes from the given modifiers Object.\n *\n * @param {String} className - The className stump.\n * @param {Object} modifiers - An Object of `key: value` BEM modifiers.\n * @param {Object} delimiters - The to be used delimiters.\n * @param {Boolean} [hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n *\n * @returns {Array.<String>}\n */\nexport function getModifiers(className, modifiers, delimiters, hyphenate) { // eslint-disable-line max-params\n  const classNameWithDelimiter = className + delimiters.modifier;\n\n  return Object.entries(modifiers || {}).map((entry) => {\n    const modifier = entry[0];\n    const value = entry[1];\n    let modifierStump = null;\n\n    if (value) {\n      switch (typeof value) { // eslint-disable-line default-case\n        case 'boolean':\n          modifierStump = modifier;\n          break;\n\n        case TYPE_STRING:\n        // Fall through\n\n        case 'number':\n          modifierStump = modifier + delimiters.value + value;\n      }\n    }\n\n    return modifierStump\n      ? classNameWithDelimiter + (hyphenate ? kebabCase(modifierStump) : modifierStump)\n      : modifierStump;\n  }).filter(Boolean);\n}\n\n/**\n * Adds a class to the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be reoved class name.\n */\nexport function addClass(element, className) {\n  element.classList.add(className);\n}\n\n/**\n * Removes a class from the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be added class name.\n */\nexport function removeClass(element, className) {\n  element.classList.remove(className);\n}\n","import {\n  addClass,\n  getModifiers,\n  removeClass,\n  kebabCase\n} from './utils';\n\n/**\n * Adds BEM classes to the element with the directive.\n *\n * e.g.\n * input `v-bem:element=\"modifiers\"`\n * output `class=\"componentName componentName__element componentName--modifier\"`\n *\n * @param {Object} options - The directive options.\n * @param {Boolean|Object} options.hyphenate - Defines if class elements should be converted to kebab-case.\n * @param {String} options.blockSource - Defines where the block name should be taken from.\n * @param {String} options.namespace - Adds a namespace to each block.\n * @param {Object} options.delimiters - An Object which contains a list of delimiter Strings to glue the class sections.\n *\n * @returns {Object}\n */\nexport default function({ hyphenate, blockSource, namespace, delimiters }) { // eslint-disable-line object-curly-newline\n  const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n  const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n\n  /**\n   * Get BEM segments.\n   *\n   * @param {Object} binding - The Vue directive binding.\n   * @param {Object} vnode - The Vue directive vnode.\n   *\n   * @returns {Object}\n   */\n  function getBEM(binding, vnode) {\n    const modifiers = binding.value;\n    let block = namespace + vnode.context.$options[blockSource];\n    let element = binding.arg;\n\n    if (hyphenateBlockAndElement) {\n      block = kebabCase(block);\n\n      if (element) {\n        element = kebabCase(element);\n      }\n    }\n\n    return {\n      block,\n      element,\n      modifiers,\n      staticModifiers: Object.keys(binding.modifiers).length ? binding.modifiers : null,\n      className: block + (element ? delimiters.element + element : ''),\n    };\n  }\n\n  return {\n    /**\n     * Set block, element and modifier classes on element insert.\n     *\n     * @param {Node} el - The element with the directive.\n     * @param {Object} binding - Binding information.\n     * @param {Object} vnode - The virtual DOM node of the element.\n     */\n    inserted(el, binding, vnode) {\n      const {\n        block,\n        element,\n        modifiers,\n        staticModifiers,\n        className\n      } = getBEM(binding, vnode);\n      const modifierClasses = Object.assign({}, staticModifiers, modifiers);\n\n      addClass(el, element ? className : block);\n\n      getModifiers(className, modifierClasses, delimiters, hyphenateModifier)\n        .forEach(modifier => addClass(el, modifier));\n    },\n\n    /**\n     * Add/remove modifier classes on update event.\n     *\n     * @param {Node} el - The element with the directive.\n     * @param {Object} binding - Binding information.\n     * @param {Object} vnode - The virtual DOM node of the element.\n     */\n    update(el, binding, vnode) {\n      const modifiersValue = binding.value;\n      const oldModifiers = binding.oldValue;\n\n      if (modifiersValue !== oldModifiers) {\n        const { modifiers, className } = getBEM(binding, vnode);\n        const modifierClasses = getModifiers(className, modifiers, delimiters, hyphenateModifier);\n\n        if (oldModifiers) {\n          const oldModifierClasses = getModifiers(className, oldModifiers, delimiters, hyphenateModifier);\n\n          oldModifierClasses.forEach((oldModifierClass) => {\n            const index = modifierClasses.indexOf(oldModifierClass);\n\n            if (index === -1) {\n              removeClass(el, oldModifierClass);\n            } else {\n              modifierClasses.splice(index, 1); // Value will not be removed and needs not to be added therefore.\n            }\n          });\n        }\n\n        modifierClasses.forEach((modifierClass) => {\n          addClass(el, modifierClass);\n        });\n      }\n    }\n  };\n}\n","import { DEFAULT_OPTIONS } from './shared';\nimport directive from './directive';\n\nexport default {\n  /**\n   * Plugin install method.\n   *\n   * @param {Object} Vue - The Vue instance\n   * @param {Object} customOptions - The plugin options\n   * @param {Object} customOptions.hyphenate - The plugin options\n   *\n   */\n  install(Vue, customOptions = { delimiters: {} }) {\n    const delimiters = Object.assign({}, DEFAULT_OPTIONS.delimiters, customOptions.delimiters);\n    const options = Object.assign({}, DEFAULT_OPTIONS, customOptions, { delimiters });\n\n    Vue.prototype.$bemOptions = options;\n\n    Vue.directive('bem', directive(options));\n  }\n};\n","import { getModifiers } from './utils';\nimport { TYPE_STRING } from './shared';\n\n/**\n * Returns a String of BEM and mixin classes based on the given parameters.\n *\n * @param {Object} options - The internal instance options.\n * @param {String} options.blockName - The block name for the current component.\n * @param {Object} options.delimiters - The to be used delimiters.\n * @param {Boolean} [options.hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n * @param {Object} args - The arguments used on the method call.\n * @param {String} [args.element] - An optional element name.\n * @param {Object} [args.modifiers] - An Object of to be applied modifiers.\n *\n * @returns {String}\n */\nexport default function({ blockName, delimiters, hyphenate }, ...args) {\n  const modifier = args[1] || args[0];\n  let classNames = [];\n  let className = blockName;\n\n  if (!args.length) {\n    return className;\n  }\n\n  if (typeof args[0] !== TYPE_STRING) { // eslint-disable-line valid-typeof\n    classNames.push(blockName);\n  } else {\n    className = blockName + delimiters.element + args[0];\n\n    classNames.push(className);\n  }\n\n  if (modifier && typeof modifier === 'object' && modifier.constructor === Object) {\n    classNames = classNames.concat(getModifiers(className, modifier, delimiters, hyphenate));\n  }\n\n  return classNames.join(' ');\n}\n","import { kebabCase } from './utils';\nimport { TYPE_STRING } from './shared';\nimport bem from './bem';\n\nconst mixin = {\n  created() {\n    const {\n      blockSource,\n      namespace,\n      hyphenate,\n      delimiters,\n      method\n    } = this.$bemOptions || {};\n    const block = this.$options[blockSource];\n\n    if (block && typeof block === TYPE_STRING) { // eslint-disable-line valid-typeof\n      const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n      const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n      const namespacedBlock = (namespace || '') + block;\n      const blockName = hyphenateBlockAndElement ? kebabCase(namespacedBlock) : namespacedBlock;\n\n      this[method] = (...args) => bem({ blockName, delimiters, hyphenate: hyphenateModifier }, ...args);\n    }\n  }\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  mixin.beforeCreate = function() {\n    if (!this.$bemOptions) {\n      throw new Error('Looks like the plugin of vue-bem is not used by Vue. Please do so or the mixin will not work!');\n    }\n  };\n}\n\nexport default mixin;\n"],"names":["TYPE_STRING","DEFAULT_OPTIONS","namespace","blockSource","method","hyphenate","blockAndElement","modifier","delimiters","element","value","HYPHENATE_CACHE","kebabCase","str","replace","toLowerCase","getModifiers","className","modifiers","classNameWithDelimiter","Object","entries","map","entry","modifierStump","filter","Boolean","addClass","classList","add","removeClass","remove","hyphenateBlockAndElement","hyphenateModifier","getBEM","binding","vnode","block","context","$options","arg","staticModifiers","keys","length","inserted","el","modifierClasses","assign","forEach","update","modifiersValue","oldModifiers","oldValue","oldModifierClasses","oldModifierClass","index","indexOf","splice","modifierClass","install","Vue","customOptions","options","prototype","$bemOptions","directive","blockName","classNames","push","constructor","concat","join","mixin","created","namespacedBlock","args","bem"],"mappings":"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"}