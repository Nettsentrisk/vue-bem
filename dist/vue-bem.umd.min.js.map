{"version":3,"file":"vue-bem.umd.min.js","sources":["src/modules/shared.js","src/modules/utils.js","src/modules/plugin.js","src/modules/mixin.js","src/modules/bem.js"],"sourcesContent":["export const DEFAULT_OPTIONS = {\n  namespace: '',\n  blockSource: 'name',\n  methodName: 'bem',\n  hyphenate: {\n    blockAndElement: false,\n    modifier: true,\n  },\n  delimiters: {\n    element: '__',\n    modifier: '--',\n    value: '-',\n  }\n};\n\nexport const HYPHENATE_CACHE = {};\n","import { HYPHENATE_CACHE } from './shared';\n\n/**\n * Convert the given string to kebab-case.\n *\n * @param {String} str - The to be converted string.\n *\n * @returns {String}\n */\nexport function hyphenateString(str) {\n  return HYPHENATE_CACHE[str] // eslint-disable-line no-return-assign\n    || (HYPHENATE_CACHE[str] = str.replace(/\\B([A-Z])/g, '-$1').toLowerCase());\n}\n\n/**\n * Create an Array of modifier classes from the given modifiers Object.\n *\n * @param {String} className - The className stump.\n * @param {Object} modifiers - An Object of `key: value` BEM modifiers.\n * @param {Object} delimiters - The to be used delimiters.\n * @param {Boolean} [hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n *\n * @returns {Array.<String>}\n */\nexport function getModifiers(className, modifiers, delimiters, hyphenate) { // eslint-disable-line max-params\n  return Object.entries(modifiers || {}).map((entry) => {\n    const modifier = entry[0];\n    const value = entry[1];\n    let modifierStump = null;\n\n    if (value) {\n      switch (typeof value) { // eslint-disable-line default-case\n        case 'boolean':\n          modifierStump = modifier;\n          break;\n\n        case 'string':\n        // Fall through\n\n        case 'number':\n          modifierStump = modifier + delimiters.value + value;\n      }\n    }\n\n    return modifierStump\n      ? className + delimiters.modifier + (hyphenate ? hyphenateString(modifierStump) : modifierStump)\n      : modifierStump;\n  }).filter(Boolean);\n}\n\n/**\n * Adds a class to the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be reoved class name.\n */\nexport function addClass(element, className) {\n  element.classList.add(className);\n}\n\n/**\n * Removes a class from the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be added class name.\n */\nexport function removeClass(element, className) {\n  element.classList.remove(className);\n}\n","import { DEFAULT_OPTIONS } from './shared';\nimport {\n  hyphenateString,\n  getModifiers,\n  addClass,\n  removeClass\n} from './utils';\n\nexport default {\n  /**\n   * Plugin install method.\n   *\n   * @param {Object} Vue - The Vue instance\n   * @param {Object} customOptions - The plugin options\n   * @param {Object} customOptions.hyphenate - The plugin options\n   *\n   */\n  install(Vue, customOptions = { delimiters: {} }) {\n    const internalOptions = {\n      ...DEFAULT_OPTIONS,\n      ...customOptions,\n      delimiters: {\n        ...DEFAULT_OPTIONS.delimiters,\n        ...customOptions.delimiters\n      }\n    };\n    const { delimiters, hyphenate } = internalOptions;\n    const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n    const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n\n    Vue.prototype.$bemOptions = internalOptions;\n\n    /**\n     * Get BEM segments.\n     *\n     * @param {Object} binding - The Vue directive binding.\n     * @param {Object} vnode - The Vue directive vnode.\n     *\n     * @returns {Object}\n     */\n    function getBEM(binding, vnode) {\n      const modifiers = binding.value;\n      let block = internalOptions.namespace + vnode.context.$options[internalOptions.blockSource];\n      let element = binding.arg;\n\n      if (hyphenateBlockAndElement) {\n        block = hyphenateString(block);\n\n        if (element) {\n          element = hyphenateString(element);\n        }\n      }\n\n      return {\n        block,\n        element,\n        modifiers,\n        className: block + (element ? delimiters.element + element : ''),\n      };\n    }\n\n    /**\n     * Adds BEM classes to the element with the directive.\n     *\n     * e.g.\n     * input `v-bem:element.mixin=\"modifiers\"`\n     * output `class=\"componentName componentName__element componentName--modifier mixin\"`\n     */\n    Vue.directive('bem', {\n      /**\n       * Set block, element and modifier classes on element insert.\n       *\n       * @param {Node} el - The element with the directive.\n       * @param {Object} binding - Binding information.\n       * @param {Object} vnode - The virtual DOM node of the element.\n       */\n      inserted(el, binding, vnode) {\n        const {\n          block,\n          element,\n          modifiers,\n          className\n        } = getBEM(binding, vnode);\n        const mixins = Object.keys(binding.modifiers);\n\n        addClass(el, element ? className : block);\n\n        if (modifiers) {\n          getModifiers(className, modifiers, internalOptions.delimiters, hyphenateModifier).forEach((modifier) => {\n            addClass(el, modifier);\n          });\n        }\n\n        mixins.forEach((mixin) => {\n          addClass(el, mixin);\n        });\n      },\n\n      /**\n       * Add/remove modifier classes on update event.\n       *\n       * @param {Node} el - The element with the directive.\n       * @param {Object} binding - Binding information.\n       * @param {Object} vnode - The virtual DOM node of the element.\n       */\n      update(el, binding, vnode) {\n        const modifiersValue = binding.value;\n        const oldModifiers = binding.oldValue;\n\n        if (modifiersValue !== oldModifiers) {\n          const { modifiers, className } = getBEM(binding, vnode);\n          const modifierClasses = getModifiers(className, modifiers, internalOptions.delimiters, hyphenateModifier);\n\n          if (oldModifiers) {\n            const oldModifierClasses = getModifiers(className, oldModifiers, internalOptions.delimiters, hyphenateModifier);\n\n            oldModifierClasses.forEach((oldModifierClass) => {\n              const index = modifierClasses.indexOf(oldModifierClass);\n\n              if (index === -1) {\n                removeClass(el, oldModifierClass);\n              } else {\n                modifierClasses.splice(index, 1); // Value will not be removed and needs not to be added therefore.\n              }\n            });\n          }\n\n          modifierClasses.forEach((modifierClass) => {\n            addClass(el, modifierClass);\n          });\n        }\n      }\n    });\n  }\n};\n","import { hyphenateString } from './utils';\nimport bem from './bem';\n\nexport default {\n  beforeCreate() {\n    if (!this.$bemOptions) {\n      this.$bemOptions = {};\n\n      throw new Error('Looks like the plugin of vue-bem is not used by Vue. Please do so or the mixin will not work!');\n    }\n  },\n  created() {\n    const {\n      blockSource,\n      namespace,\n      hyphenate,\n      delimiters,\n      methodName\n    } = this.$bemOptions;\n    const block = this.$options[blockSource];\n\n    if (block && typeof block === 'string') {\n      const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n      const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n      const namespacedBlock = (namespace || '') + block;\n      const blockName = hyphenateBlockAndElement ? hyphenateString(namespacedBlock) : namespacedBlock;\n\n      this[methodName] = (...args) => bem({ blockName, delimiters, hyphenate: hyphenateModifier }, ...args);\n    }\n  }\n};\n","import { getModifiers } from './utils';\n\n/**\n * Returns a String of BEM and mixin classes based on the given parameters.\n *\n * @param {Object} options - The internal instance options.\n * @param {String} options.blockName - The block name for the current component.\n * @param {Object} options.delimiters - The to be used delimiters.\n * @param {Boolean} [options.hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n * @param {Object} args - The arguments used on the method call.\n * @param {String} [args.element] - An optional element name.\n * @param {Object} [args.modifiers] - An Object of to be applied modifiers.\n * @param {Array} [args.mixins] - An Array of to be applied mixin classes.\n *\n * @returns {String}\n */\nexport default function({ blockName, delimiters, hyphenate }, ...args) {\n  const classNames = [];\n  const length = args.length < 4 ? args.length : 3;\n  let className = blockName;\n\n  if (!length) {\n    return className;\n  }\n\n  if (typeof args[0] !== 'string') {\n    classNames.push(blockName);\n  }\n\n  for (let i = 0; i < length; i += 1) {\n    const value = args[i];\n\n    switch (typeof value) {\n      case 'string':\n        className = blockName + delimiters.element + value;\n\n        classNames.push(className);\n        break;\n\n      case 'object': // Is modifier\n        if (value && value.constructor === Object) {\n          classNames.push(...getModifiers(className, value, delimiters, hyphenate));\n        } else if (Array.isArray(value)) { // Is mixin\n          classNames.push(...value);\n        }\n\n        // no default\n    }\n  }\n\n  return classNames.join(' ');\n}\n"],"names":["DEFAULT_OPTIONS","namespace","blockSource","methodName","hyphenate","blockAndElement","modifier","delimiters","element","value","HYPHENATE_CACHE","hyphenateString","str","replace","toLowerCase","getModifiers","className","modifiers","Object","entries","map","entry","modifierStump","filter","Boolean","addClass","classList","add","install","Vue","customOptions","internalOptions","hyphenateBlockAndElement","hyphenateModifier","getBEM","binding","vnode","block","context","$options","arg","prototype","$bemOptions","directive","inserted","el","mixins","keys","forEach","mixin","update","modifiersValue","oldModifiers","oldValue","modifierClasses","oldModifierClass","index","indexOf","remove","splice","modifierClass","beforeCreate","this","Error","created","namespacedBlock","blockName","args","classNames","length","push","i","constructor","Array","isArray","join"],"mappings":"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"}