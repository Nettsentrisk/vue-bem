{"version":3,"file":"vue-bem-directive.esm.js","sources":["src/modules/shared.js","src/modules/utils.js","src/modules/plugin.js","src/modules/bem.js","src/modules/mixin.js"],"sourcesContent":["export const DEFAULT_OPTIONS = {\n  namespace: '',\n  blockSource: 'name',\n  methodName: 'bem',\n  hyphenate: {\n    blockAndElement: false,\n    modifier: true,\n  },\n  delimiters: {\n    element: '__',\n    modifier: '--',\n    value: '-',\n  }\n};\n\nexport const HYPHENATE_CACHE = {};\n","import { HYPHENATE_CACHE } from './shared';\n\n/**\n * Convert the given string to kebab-case.\n *\n * @param {String} str - The to be converted string.\n *\n * @returns {String}\n */\nexport function hyphenateString(str) {\n  return HYPHENATE_CACHE[str] // eslint-disable-line no-return-assign\n    || (HYPHENATE_CACHE[str] = str.replace(/\\B([A-Z])/g, '-$1').toLowerCase());\n}\n\n/**\n * Create an Array of modifier classes from the given modifiers Object.\n *\n * @param {String} className - The className stump.\n * @param {Object} modifiers - An Object of `key: value` BEM modifiers.\n * @param {Object} delimiters - The to be used delimiters.\n * @param {Boolean} [hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n *\n * @returns {Array.<String>}\n */\nexport function getModifiers(className, modifiers, delimiters, hyphenate) { // eslint-disable-line max-params\n  return Object.entries(modifiers || {}).map((entry) => {\n    const modifier = entry[0];\n    const value = entry[1];\n    let modifierStump = null;\n\n    if (value) {\n      switch (typeof value) { // eslint-disable-line default-case\n        case 'boolean':\n          modifierStump = modifier;\n          break;\n\n        case 'string':\n        // Fall through\n\n        case 'number':\n          modifierStump = modifier + delimiters.value + value;\n      }\n    }\n\n    return modifierStump\n      ? className + delimiters.modifier + (hyphenate ? hyphenateString(modifierStump) : modifierStump)\n      : modifierStump;\n  }).filter(Boolean);\n}\n\n/**\n * Adds a class to the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be reoved class name.\n */\nexport function addClass(element, className) {\n  element.classList.add(className);\n}\n\n/**\n * Removes a class from the given DOM element.\n *\n * @param {Node} element - The to be modified element.\n * @param {String} className - The to be added class name.\n */\nexport function removeClass(element, className) {\n  element.classList.remove(className);\n}\n","import { DEFAULT_OPTIONS } from './shared';\nimport {\n  hyphenateString,\n  getModifiers,\n  addClass,\n  removeClass\n} from './utils';\n\nexport default {\n  /**\n   * Plugin install method.\n   *\n   * @param {Object} Vue - The Vue instance\n   * @param {Object} customOptions - The plugin options\n   * @param {Object} customOptions.hyphenate - The plugin options\n   *\n   */\n  install(Vue, customOptions = { delimiters: {} }) {\n    const internalOptions = {\n      ...DEFAULT_OPTIONS,\n      ...customOptions,\n      delimiters: {\n        ...DEFAULT_OPTIONS.delimiters,\n        ...customOptions.delimiters\n      }\n    };\n    const { delimiters, hyphenate } = internalOptions;\n    const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n    const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n\n    Vue.prototype.$bemOptions = internalOptions;\n\n    /**\n     * Get BEM segments.\n     *\n     * @param {Object} binding - The Vue directive binding.\n     * @param {Object} vnode - The Vue directive vnode.\n     *\n     * @returns {Object}\n     */\n    function getBEM(binding, vnode) {\n      const modifiers = binding.value;\n      let block = internalOptions.namespace + vnode.context.$options[internalOptions.blockSource];\n      let element = binding.arg;\n\n      if (hyphenateBlockAndElement) {\n        block = hyphenateString(block);\n\n        if (element) {\n          element = hyphenateString(element);\n        }\n      }\n\n      return {\n        block,\n        element,\n        modifiers,\n        className: block + (element ? delimiters.element + element : ''),\n      };\n    }\n\n    /**\n     * Adds BEM classes to the element with the directive.\n     *\n     * e.g.\n     * input `v-bem:element.mixin=\"modifiers\"`\n     * output `class=\"componentName componentName__element componentName--modifier mixin\"`\n     */\n    Vue.directive('bem', {\n      /**\n       * Set block, element and modifier classes on element insert.\n       *\n       * @param {Node} el - The element with the directive.\n       * @param {Object} binding - Binding information.\n       * @param {Object} vnode - The virtual DOM node of the element.\n       */\n      inserted(el, binding, vnode) {\n        const {\n          block,\n          element,\n          modifiers,\n          className\n        } = getBEM(binding, vnode);\n        const mixins = Object.keys(binding.modifiers);\n\n        addClass(el, element ? className : block);\n\n        if (modifiers) {\n          getModifiers(className, modifiers, internalOptions.delimiters, hyphenateModifier).forEach((modifier) => {\n            addClass(el, modifier);\n          });\n        }\n\n        mixins.forEach((mixin) => {\n          addClass(el, mixin);\n        });\n      },\n\n      /**\n       * Add/remove modifier classes on update event.\n       *\n       * @param {Node} el - The element with the directive.\n       * @param {Object} binding - Binding information.\n       * @param {Object} vnode - The virtual DOM node of the element.\n       */\n      update(el, binding, vnode) {\n        const modifiersValue = binding.value;\n        const oldModifiers = binding.oldValue;\n\n        if (modifiersValue !== oldModifiers) {\n          const { modifiers, className } = getBEM(binding, vnode);\n          const modifierClasses = getModifiers(className, modifiers, internalOptions.delimiters, hyphenateModifier);\n\n          if (oldModifiers) {\n            const oldModifierClasses = getModifiers(className, oldModifiers, internalOptions.delimiters, hyphenateModifier);\n\n            oldModifierClasses.forEach((oldModifierClass) => {\n              const index = modifierClasses.indexOf(oldModifierClass);\n\n              if (index === -1) {\n                removeClass(el, oldModifierClass);\n              } else {\n                modifierClasses.splice(index, 1); // Value will not be removed and needs not to be added therefore.\n              }\n            });\n          }\n\n          modifierClasses.forEach((modifierClass) => {\n            addClass(el, modifierClass);\n          });\n        }\n      }\n    });\n  }\n};\n","import { getModifiers } from './utils';\n\n/**\n * Returns a String of BEM and mixin classes based on the given parameters.\n *\n * @param {Object} options - The internal instance options.\n * @param {String} options.blockName - The block name for the current component.\n * @param {Object} options.delimiters - The to be used delimiters.\n * @param {Boolean} [options.hyphenate=false] - Defines if hyphenated should be used on the modifiers.\n * @param {Object} args - The arguments used on the method call.\n * @param {String} [args.element] - An optional element name.\n * @param {Object} [args.modifiers] - An Object of to be applied modifiers.\n * @param {Array} [args.mixins] - An Array of to be applied mixin classes.\n *\n * @returns {String}\n */\nexport default function({ blockName, delimiters, hyphenate }, ...args) {\n  const classNames = [];\n  const length = args.length < 4 ? args.length : 3;\n  let className = blockName;\n\n  if (!length) {\n    return className;\n  }\n\n  if (typeof args[0] !== 'string') {\n    classNames.push(blockName);\n  }\n\n  for (let i = 0; i < length; i += 1) {\n    const value = args[i];\n\n    switch (typeof value) {\n      case 'string':\n        className = blockName + delimiters.element + value;\n\n        classNames.push(className);\n        break;\n\n      case 'object': // Is modifier\n        if (value && value.constructor === Object) {\n          classNames.push(...getModifiers(className, value, delimiters, hyphenate));\n        } else if (Array.isArray(value)) { // Is mixin\n          classNames.push(...value);\n        }\n\n        // no default\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { hyphenateString } from './utils';\nimport bem from './bem';\n\nexport default {\n  beforeCreate() {\n    if (!this.$bemOptions) {\n      this.$bemOptions = {};\n\n      throw new Error('Looks like the plugin of vue-bem is not used by Vue. Please do so or the mixin will not work!');\n    }\n  },\n  created() {\n    const {\n      blockSource,\n      namespace,\n      hyphenate,\n      delimiters,\n      methodName\n    } = this.$bemOptions;\n    const block = this.$options[blockSource];\n\n    if (block && typeof block === 'string') {\n      const hyphenateBlockAndElement = hyphenate === true || (hyphenate || {}).blockAndElement || false;\n      const hyphenateModifier = hyphenate === true || (hyphenate || {}).modifier || false;\n      const namespacedBlock = (namespace || '') + block;\n      const blockName = hyphenateBlockAndElement ? hyphenateString(namespacedBlock) : namespacedBlock;\n\n      this[methodName] = (...args) => bem({ blockName, delimiters, hyphenate: hyphenateModifier }, ...args);\n    }\n  }\n};\n"],"names":["DEFAULT_OPTIONS","namespace","blockSource","methodName","hyphenate","blockAndElement","modifier","delimiters","element","value","HYPHENATE_CACHE","hyphenateString","str","replace","toLowerCase","getModifiers","className","modifiers","Object","entries","map","entry","modifierStump","filter","Boolean","addClass","classList","add","removeClass","remove","install","Vue","customOptions","internalOptions","hyphenateBlockAndElement","hyphenateModifier","prototype","$bemOptions","getBEM","binding","vnode","block","context","$options","arg","directive","inserted","el","mixins","keys","forEach","mixin","update","modifiersValue","oldModifiers","oldValue","modifierClasses","oldModifierClasses","oldModifierClass","index","indexOf","splice","modifierClass","blockName","classNames","length","push","i","constructor","Array","isArray","join","beforeCreate","Error","created","namespacedBlock","args","bem"],"mappings":"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"}